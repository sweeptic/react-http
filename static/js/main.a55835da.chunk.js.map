{"version":3,"sources":["axios.js","Component/Post.js","Component/FullPost.js","Container/Posts.js","Component/Navbar.js","Container/Blog.js","hoc/AsyncComponent.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","withRouter","props","className","onClick","clicked","src","imgPath","alt","imgAlt","title","author","FullPost","state","loadedPost","deletePostHandler","console","log","this","loadData","match","params","id","get","then","response","setState","data","post","style","textAlign","process","body","type","Component","Posts","posts","selectedPostId","error","postSelectedHandler","history","push","updatedPosts","slice","map","catch","key","Container","path","url","exact","component","Navbar_Component","myActiveStyle","color","borderBottom","transition","Navbar","width","overflowX","fixed","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","NavLink","to","activeStyle","pathname","hash","search","AsyncNewPost","importComponent","cmp","default","C","AsyncComponent","Blog","auth","backgroundColor","render","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a55835da.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://react-http-cec91.firebaseio.com/\"\r\n});\r\n\r\nexport default instance;","import React from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nconst Post = (props) => {\r\n   return (\r\n      <div className=\"card text-center border-0\" onClick={props.clicked}>\r\n         <img className=\"card-img-top\"\r\n            src={props.imgPath}\r\n            alt={props.imgAlt} />\r\n         <div className=\"card-body p-0\">\r\n            <h5 className=\"card-title border-bottom p-3 \">{props.title}</h5>\r\n            <p className=\"card-text bg-secondary mt-1 text-white rounded d-inline-flex px-2 mb-3\">{props.author}</p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default withRouter(Post);","import React, { Component } from 'react'\r\nimport axios from '../axios'\r\n\r\nclass FullPost extends Component {\r\n   state = {\r\n      loadedPost: null,\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.loadData();\r\n   }\r\n\r\n   componentDidUpdate() {\r\n      this.loadData();\r\n   }\r\n\r\n   loadData() {\r\n      if (this.props.match.params.id) {\r\n         if (!this.state.loadedPost\r\n            || (this.state.loadedPost && this.state.loadedPost.id !== +this.props.match.params.id)) {\r\n            axios.get('/posts/' + this.props.match.params.id + '.json')\r\n               .then(response => {\r\n                  this.setState({ loadedPost: response.data });\r\n\r\n                  console.log(this.state.loadedPost.id)\r\n                  console.log(this.props.match.params.id)\r\n               });\r\n         }\r\n      }\r\n   }\r\n\r\n   deletePostHandler = () => {\r\n      console.log('deleting selected post')\r\n   }\r\n\r\n   render() {\r\n\r\n      let post = <p style={{ textAlign: \"center\" }}>Please select a Post!</p>;\r\n\r\n      if (this.props.match.params.id) {\r\n         post = <p style={{ textAlign: \"center\" }}>Loading...!</p>;\r\n      }\r\n\r\n      if (this.state.loadedPost) {\r\n         post = (\r\n            <div className=\"container p-3 mt-5\">\r\n               <div className=\"card mb-3 text-center\" >\r\n\r\n                  <img className=\"card-img-top\"\r\n                     src={process.env.PUBLIC_URL + '/photos/unsplash-' + this.props.match.params.id + '.jpg'}\r\n                     alt={'photo_' + this.props.match.params.id}\r\n                  />\r\n                  <div className=\"card-body p-0\">\r\n                     <h4 className=\"card-title border-bottom p-3\">{this.state.loadedPost.title}</h4>\r\n                     <p className=\"card-text text-muted border-bottom p-3\">{this.state.loadedPost.body}</p>\r\n                     <button className=\"mb-3 btn btn-warning\" type=\"button\" onClick={this.deletePostHandler} >Delete Post</button>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n\r\n         )\r\n      }\r\n      return post;\r\n   }\r\n}\r\n\r\n\r\nexport default FullPost","import Post from '../Component/Post';\r\nimport React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport { Route } from 'react-router-dom'\r\nimport axios from '../axios'\r\n// import axios from 'axios';\r\nimport FullPost from './../Component/FullPost';\r\n\r\n\r\nclass Posts extends Component {\r\n\r\n   state = {\r\n      posts: [],\r\n      selectedPostId: null,\r\n      error: false\r\n   };\r\n\r\n   componentDidMount() {\r\n      axios\r\n         .get(\"/posts.json\")\r\n         .then((response) => {\r\n            const updatedPosts = response.data.slice(0, 3).map(post => {\r\n               return {\r\n                  ...post, author: 'Max'\r\n               }\r\n            })\r\n            this.setState({\r\n               posts: updatedPosts,\r\n            });\r\n         })\r\n         .catch((error) => {\r\n            this.setState({ error: true })\r\n         })\r\n   }\r\n\r\n   postSelectedHandler = (id) => {\r\n      // this.setState({selectedPostId: id})\r\n      this.props.history.push('/posts/' + id)\r\n   }\r\n\r\n   render() {\r\n      let posts = <p>something went wrong</p>\r\n\r\n      if (!this.state.error) {\r\n         posts = this.state.posts.map(post =>\r\n\r\n            // <Link to={'/' + post.id} key={post.id}>\r\n            <Post\r\n               imgPath={process.env.PUBLIC_URL + '/photos/unsplash-' + post.id + '.jpg'}\r\n               imgAlt={'photo_' + post.id}\r\n               key={post.id}\r\n               title={post.title}\r\n               author={post.author}\r\n               clicked={() => this.postSelectedHandler(post.id)}\r\n            />\r\n            // </Link>\r\n         )\r\n      }\r\n\r\n      return (\r\n         <div>\r\n            <Container className=\"p-3 mt-5 card-columns\">\r\n               {posts}\r\n            </Container>\r\n\r\n            <Route path={this.props.match.url + '/:id'} exact component={FullPost} />\r\n\r\n         </div>\r\n\r\n      )\r\n   }\r\n\r\n}\r\n\r\nexport default Posts","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst Navbar_Component = () => {\r\n   const myActiveStyle = { color: \"white\", borderBottom: \"1px solid white\", transition: 'all 0.2s' }\r\n\r\n   return (\r\n      <header >\r\n\r\n         <Navbar style={{ width: '100vw', overflowX: 'hidden' }} fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Container >\r\n               <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n               <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n               <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                  <Nav className=\"ml-auto\">\r\n\r\n                     <Nav.Link as={NavLink} to=\"/posts/\" exact activeStyle={myActiveStyle}>Home</Nav.Link>\r\n\r\n                     <Nav.Link as={NavLink} activeStyle={myActiveStyle} to={{\r\n                        pathname: '/new-post',\r\n                        hash: '#submit',\r\n                        search: '?quick-submit=true'\r\n                     }}>New Post</Nav.Link>\r\n\r\n                  </Nav>\r\n               </Navbar.Collapse>\r\n            </Container>\r\n         </Navbar>\r\n      </header>\r\n\r\n   )\r\n}\r\n\r\nexport default Navbar_Component","import React, { Component } from 'react'\r\nimport Posts from './Posts';\r\n// import NewPost from '../Component/NewPost';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport NavbarComponent from '../Component/Navbar'\r\nimport AsyncComponent from '../hoc/AsyncComponent';\r\n\r\n\r\nconst AsyncNewPost = AsyncComponent(() => {\r\n   return import('../Component/NewPost')\r\n});\r\n\r\n\r\nclass Blog extends Component {\r\n   state = {\r\n      auth: true\r\n   }\r\n\r\n   render() {\r\n      return (\r\n\r\n\r\n         <div style={{ backgroundColor: \"#f0f2f5\" }}>\r\n            <NavbarComponent />\r\n            <Switch>\r\n               {this.state.auth ? <Route path=\"/new-post\" component={AsyncNewPost} /> : null}\r\n               <Route path=\"/posts\" component={Posts} />\r\n               <Route render={() => <h1>Not found</h1>} />\r\n               {/* <Redirect from=\"/\" to=\"/posts\" /> */}\r\n            </Switch>\r\n         </div>\r\n\r\n\r\n\r\n      )\r\n   }\r\n}\r\n\r\nexport default Blog","import React, { Component } from 'react';\r\n\r\n\r\nconst asyncComponent = (importComponent) => {\r\n   return class extends Component {\r\n      state = {\r\n         component: null\r\n      }\r\n\r\n      componentDidMount() {\r\n         importComponent()\r\n            .then(cmp => {\r\n               this.setState({ component: cmp.default });\r\n            });\r\n      }\r\n\r\n\r\n      render() {\r\n         const C = this.state.component;\r\n\r\n         return C ? <C {...this.props} /> : null;\r\n\r\n      }\r\n   }\r\n}\r\n\r\nexport default asyncComponent ","import React, { Component } from 'react'\r\nimport Blog from './Container/Blog';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n   render() {\r\n      return (\r\n         // <BrowserRouter basename=\"/react-http\">\r\n         <BrowserRouter>\r\n            <Blog />\r\n         </BrowserRouter>\r\n      )\r\n   }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}