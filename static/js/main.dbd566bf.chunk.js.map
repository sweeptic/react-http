{"version":3,"sources":["Component/Post.js","Component/FullPost.js","Component/NewPost.js","axios.js","Container/Blog.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","onClick","clicked","src","imgPath","alt","imgAlt","title","author","FullPost","state","loadedPost","loadedPostId","deletePostHandler","console","log","this","id","Axios","get","then","response","setState","data","post","body","type","Component","NewPost","content","postDataHandler","placeholder","value","onChange","event","target","PureComponent","instance","axios","create","baseURL","Blog","posts","selectedPostId","error","updatedPosts","slice","map","catch","process","key","postSelectedHandler","style","backgroundColor","App","Boolean","window","location","hostname","match","defaults","interceptors","request","use","Promise","reject","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dbd566bf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Post = (props) => {\r\n   return (\r\n\r\n      <div className=\"card text-center border-0\"\r\n         onClick={props.clicked}\r\n      >\r\n\r\n         <img className=\"card-img-top\"\r\n            src={props.imgPath}\r\n            alt={props.imgAlt} />\r\n\r\n         <div className=\"card-body p-0\">\r\n            <h5 className=\"card-title border-bottom p-3 \">{props.title}</h5>\r\n            <p className=\"card-text bg-secondary mt-1 text-white rounded d-inline-flex px-2 mb-3\">{props.author}</p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Post\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\n\r\nclass FullPost extends Component {\r\n   state = {\r\n      loadedPost: null,\r\n      loadedPostId: null\r\n   }\r\n\r\n\r\n   componentDidUpdate() {\r\n\r\n      if (this.props.id) {\r\n         if (!this.state.loadedPost ||\r\n            (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)\r\n         ) {\r\n            Axios\r\n               .get(\"/posts/\" + this.props.id)                         \r\n               .then((response) => {\r\n                  this.setState({ loadedPost: response.data, loadedPostId: this.props.id });\r\n               })\r\n               \r\n         }\r\n      }\r\n   }\r\n\r\n   deletePostHandler = () => {\r\n      // Axios.delete(\"https://jsonplaceholder.typicode.com/posts/\" + this.props.id)\r\n      // Axios.delete(\"/posts/\" + this.props.id)\r\n      //    .then(response => {\r\n      //       console.log(response)\r\n      //    })\r\n      console.log('deleting selected post')\r\n   }\r\n\r\n   render() {\r\n      console.log('fullpost render')\r\n\r\n      let post = (\r\n         <div className=\"card mb-3 text-center border-0\" >\r\n            <div className=\"card-body\">\r\n               <p className=\"card-text text-muted\">Please select a post !</p>\r\n            </div>\r\n         </div>)\r\n\r\n      if (this.state.id || (this.state.loadedPostId !== this.props.id)) {\r\n         post = (\r\n            <div className=\"card mb-3 text-center border-0\" >\r\n               <div className=\"card-body\">\r\n                  <p className=\"card-text text-muted\">Loading...</p>\r\n               </div>\r\n            </div>)\r\n      }\r\n\r\n\r\n      if (this.state.loadedPost) {\r\n         post = (\r\n            <div className=\"card mb-3 text-center\" >\r\n               <div className=\"card-body p-0\">\r\n                  <h4 className=\"card-title border-bottom p-3\">{this.state.loadedPost.title}</h4>\r\n                  <p className=\"card-text text-muted border-bottom p-3\">{this.state.loadedPost.body}</p>\r\n                  <button className=\"mb-3 btn btn-warning\" type=\"button\" onClick={this.deletePostHandler} >Delete Post</button>\r\n               </div>\r\n            </div>\r\n         )\r\n      }\r\n\r\n      return post;\r\n   }\r\n}\r\n\r\n\r\nexport default FullPost","import React, { PureComponent } from 'react'\r\n\r\n\r\n\r\nexport default class NewPost extends PureComponent {\r\n   state = {\r\n      title: '',\r\n      author: 'Max',\r\n      content: ''\r\n   }\r\n\r\n\r\n   postDataHandler = () => {\r\n\r\n      // const data = {\r\n      //    title: this.state.title,\r\n      //    author: this.state.author,\r\n      //    content: this.state.content,\r\n      // }\r\n      // Axios.post(\"/posts\", data)\r\n      // .then(response => {\r\n      //     console.log(response)\r\n      // })\r\n      console.log('added new post')\r\n\r\n   }\r\n\r\n   render() {\r\n      console.log('newpost render')\r\n      return (\r\n         <div className=\"card p-4 \">\r\n            <div className=\"card-body\">\r\n               <h3 className=\"text-center\">New Post</h3>\r\n               <hr />\r\n\r\n               <div className=\"row\">\r\n\r\n                  <div className=\"col-md-6\">\r\n                     <div className=\"form-group\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Title\" value={this.state.title} onChange={(event) => this.setState({ title: event.target.value })} />\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-6\">\r\n                     <div className=\"form-group\">\r\n\r\n                        <select value={this.state.author} className=\"form-control\" id=\"gender\" onChange={(event) => this.setState({ author: event.target.value })}>\r\n                           <option value=\"Max\">Max</option>\r\n                           <option value=\"Anna\">Anna</option>\r\n                        </select>\r\n                     </div>\r\n                  </div>\r\n\r\n               </div>\r\n\r\n               <div className=\"row\">\r\n\r\n                  <div className=\"col-md-12\">\r\n                     <div className=\"form-group\">\r\n                        <textarea value={this.state.content} className=\"form-control\" placeholder=\"Blog Post\" onChange={(event) => this.setState({ content: event.target.value })}></textarea>\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-12\">\r\n                     <div className=\"form-group\">\r\n                        <input onClick={this.postDataHandler} type=\"submit\" value=\"Submit\" className=\"btn btn-danger btn-block\" />\r\n                     </div>\r\n                  </div>\r\n\r\n               </div>\r\n\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n","import  axios  from 'axios';\r\n\r\nconst instance = axios.create( {\r\n   baseURL: \"https://jsonplaceholder.typicode.com\"\r\n});\r\n\r\n// instance.defaults.headers.common[\"Authorization\"] = \"AUTH TOKEN FROM INSTANCE\";\r\n\r\nexport default instance","import React, { PureComponent } from 'react'\r\nimport Post from '../Component/Post';\r\nimport FullPost from '../Component/FullPost';\r\nimport NewPost from '../Component/NewPost';\r\n// import Axios from 'axios';\r\n// import styled from 'styled-components';\r\nimport axios from '../axios'\r\n\r\n// const GrayBackground = styled.div`\r\n// background-color: lightgrey;\r\n// `;\r\n\r\n\r\nclass Blog extends PureComponent {\r\n\r\n   state = {\r\n      posts: [],\r\n      selectedPostId: null,\r\n      error: false\r\n   };\r\n\r\n\r\n   componentDidMount() {\r\n      axios\r\n         .get(\"/posts\")\r\n         .then((response) => {\r\n\r\n            const updatedPosts = response.data.slice(0, 10).map(post => {\r\n               return {\r\n                  ...post, author: 'Max'\r\n               }\r\n            })\r\n\r\n            this.setState({\r\n               posts: updatedPosts,\r\n            });\r\n\r\n         })\r\n         .catch((error) => {\r\n            this.setState({ error: true })\r\n         })\r\n\r\n\r\n   }\r\n\r\n   postSelectedHandler(id) {\r\n      this.setState({\r\n         selectedPostId: id\r\n      })\r\n   }\r\n\r\n   render() {\r\n      console.log('Blog render')\r\n      let posts = <p>something went wrong</p>\r\n\r\n      if (!this.state.error) {\r\n         posts = this.state.posts.map(post =>\r\n               <Post\r\n                  imgPath={process.env.PUBLIC_URL + '/photos/unsplash-' + post.id + '.jpg'}\r\n                  imgAlt={'photo_' + post.id}\r\n                  key={post.id}\r\n                  title={post.title}\r\n                  author={post.author}\r\n                  clicked={() => this.postSelectedHandler(post.id)}\r\n               />\r\n         )\r\n      }\r\n\r\n\r\n      return (\r\n         <div style={{ backgroundColor: \"#f0f2f5\" }}>\r\n            <div className=\"container p-3 card-columns\" >\r\n               {posts}\r\n            </div>\r\n            <div className=\"container  p-3\" >\r\n               <FullPost id={this.state.selectedPostId} />\r\n            </div>\r\n            <div className=\"container p-3\" >\r\n               <NewPost />\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Blog","import React, { Component } from 'react'\nimport Blog from './Container/Blog';\n\n\nclass App extends Component {\n   render() {\n      return (\n         <Blog />\n      )\n   }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\n// Axios.defaults.headers.common['Authorization'] = 'AUTH TOKEN';\n// Axios.defaults.headers.post['Content-Type'] = 'application/json';\n\nAxios.interceptors.request.use(\n   (request) => {\n      console.log(request)\n      return request\n   },\n   (error) => {\n      console.log(error)\n      return Promise.reject(error)\n   }\n);\n\nAxios.interceptors.response.use(\n   (response) => {\n       console.log(response);\n       // Edit request config\n       return response;\n   },\n   (error) => {\n       console.log(error);\n       return Promise.reject(error);\n   }\n);\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}