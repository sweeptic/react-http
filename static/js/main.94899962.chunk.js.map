{"version":3,"sources":["axios.js","Component/Post.js","Component/FullPost.js","Container/Posts.js","Component/Navbar.js","Container/Blog.js","hoc/AsyncComponent.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","interceptors","request","use","error","Promise","reject","response","withRouter","props","className","onClick","clicked","src","imgPath","alt","imgAlt","title","author","FullPost","_isMounted","state","loadedPost","deletePostHandler","this","loadData","console","log","match","params","id","get","then","data","history","replace","setState","post","style","textAlign","process","body","type","Component","Posts","posts","selectedPostId","postSelectedHandler","push","updatedPosts","slice","map","catch","key","Container","path","url","exact","component","Navbar_Component","myActiveStyle","color","borderBottom","transition","Navbar","width","overflowX","fixed","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","NavLink","to","activeStyle","pathname","hash","search","AsyncNewPost","importComponent","cmp","default","C","React","AsyncComponent","Blog","auth","backgroundColor","from","render","margin","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.94899962.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://react-http-cec91.firebaseio.com/\"\n});\n\n\n\ninstance.interceptors.request.use(\n    (request) => {\n        // console.log(request);\n        // Edit request config\n        return request;\n    },\n    (error) => {\n        // console.log(error);\n        return Promise.reject(error);\n    }\n);\n\ninstance.interceptors.response.use(\n    (response) => {\n        //  console.log(response.data);\n        // Edit request config\n        // if(response.data !== null )\n        return response;\n    },\n    (error) => {\n        // console.log(error);\n        return Promise.reject(error);\n    }\n);\n\n\n\n\nexport default instance;","import React from 'react'\nimport { withRouter } from 'react-router-dom';\n\n\nconst Post = (props) => {\n   return (\n      <div className=\"card text-center border-0\" onClick={props.clicked}>\n         <img className=\"card-img-top\"\n            src={props.imgPath}\n            alt={props.imgAlt} />\n         <div className=\"card-body p-0\">\n            <h5 className=\"card-title border-bottom p-3 \">{props.title}</h5>\n            <p className=\"card-text bg-secondary mt-1 text-white rounded d-inline-flex px-2 mb-3\">{props.author}</p>\n         </div>\n      </div>\n   )\n}\n\nexport default withRouter(Post);\n\n// export default Post;","import React, { Component } from 'react'\nimport axios from '../axios'\n\nclass FullPost extends Component {\n   _isMounted = false;\n\n   state = {\n      loadedPost: null,\n   }\n\n   componentDidMount() {\n      this.loadData();\n      this._isMounted = true;\n      console.log(this)\n   }\n\n   componentDidUpdate() {\n      this.loadData();\n   }\n\n   loadData() {\n      // console.log(this.props.match.params.id)\n      if (this.props.match.params.id) {\n         if (!this.state.loadedPost\n            || (this.state.loadedPost && this.state.loadedPost.id !== +this.props.match.params.id)) {\n            axios.get('/posts/' + this.props.match.params.id + '.json')\n               .then(\n                  response => {\n                     if (response && !response.data) {\n                        // console.log(this)\n                        this.props.history.replace('/posts');\n                     }\n                     this.setState({ loadedPost: response.data });\n                  }\n               );\n         }\n      }\n   }\n\n   componentWillUnmount() {\n      this._isMounted = false;\n   }\n\n\n   deletePostHandler = () => {\n      // console.log('deleting selected post')\n   }\n\n   render() {\n\n      let post = <p style={{ textAlign: \"center\" }}>Please select a Post!</p>;\n\n      if (this.props.match.params.id) {\n         post = <p style={{ textAlign: \"center\" }}>Loading...!</p>;\n      }\n\n      if (this.state.loadedPost) {\n         post = (\n            <div className=\"container p-3 mt-5\">\n               <div className=\"card mb-3 text-center\" >\n                  <img className=\"card-img-top\"\n                     src={process.env.PUBLIC_URL + '/photos/unsplash-' + this.props.match.params.id + '.jpg'}\n                     alt={'photo_' + this.props.match.params.id}\n                  />\n                  <div className=\"card-body p-0\">\n                     <h4 className=\"card-title border-bottom p-3\">{this.state.loadedPost.title}</h4>\n                     <p className=\"card-text text-muted border-bottom p-3\">{this.state.loadedPost.body}</p>\n                     <button className=\"mb-3 btn btn-warning\" type=\"button\" onClick={this.deletePostHandler} >Delete Post</button>\n                  </div>\n               </div>\n            </div>\n         )\n      }\n      return post;\n   }\n}\n\nexport default FullPost","import Post from '../Component/Post';\nimport React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport { Route } from 'react-router-dom'\nimport axios from '../axios'\n// import axios from 'axios';\nimport FullPost from './../Component/FullPost';\n\n\nclass Posts extends Component {\n\n   state = {\n      posts: [],\n      selectedPostId: null,\n      error: false\n   };\n\n   componentDidMount() {\n      axios\n         .get(\"/posts.json\")\n         .then((response) => {\n            const updatedPosts = response.data.slice(0, 3).map(post => {\n               return {\n                  ...post, author: 'Max'\n               }\n            })\n            this.setState({\n               posts: updatedPosts,\n            });\n         })\n         .catch((error) => {\n            this.setState({ error: true })\n         })\n   }\n\n   postSelectedHandler = (id) => {\n      this.props.history.push('/posts/' + id);\n   }\n\n   render() {\n      let posts = <p>something went wrong</p>\n\n      if (!this.state.error) {\n         posts = this.state.posts.map(post =>\n\n            <Post\n               imgPath={process.env.PUBLIC_URL + '/photos/unsplash-' + post.id + '.jpg'}\n               imgAlt={'photo_' + post.id}\n               key={post.id}\n               title={post.title}\n               author={post.author}\n               clicked={() => this.postSelectedHandler(post.id)}\n            />\n\n         )\n      }\n\n      return (\n         <div>\n            <Container className=\"p-3 mt-5 card-columns\">\n               {posts}\n            </Container>\n            <Route path={this.props.match.url + '/:id'} exact component={FullPost} />\n         </div>\n\n      )\n   }\n}\n\nexport default Posts","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Navbar_Component = () => {\n   const myActiveStyle = { color: \"white\", borderBottom: \"1px solid white\", transition: 'all 0.2s' }\n\n   return (\n      <header >\n         <Navbar style={{ width: '100vw', overflowX: 'hidden' }} fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Container >\n               <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n               <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n               <Navbar.Collapse id=\"responsive-navbar-nav\">\n                  <Nav className=\"ml-auto\">\n                     <Nav.Link as={NavLink} to=\"/posts/\"  activeStyle={myActiveStyle}>Home</Nav.Link>\n                     <Nav.Link as={NavLink} activeStyle={myActiveStyle} to={{\n                        pathname: '/new-post',\n                        hash: '#submit',\n                        search: '?quick-submit=true'\n                     }}>New Post</Nav.Link>\n                  </Nav>\n               </Navbar.Collapse>\n            </Container>\n         </Navbar>\n      </header>\n   )\n}\n\nexport default Navbar_Component","import React, { Component } from 'react'\nimport Posts from './Posts';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport NavbarComponent from '../Component/Navbar'\nimport AsyncComponent from '../hoc/AsyncComponent';\n\n\nconst AsyncNewPost = AsyncComponent(() => {\n   return import('../Component/NewPost')\n});\n\n\nclass Blog extends Component {\n   state = {\n      auth: true\n   }\n\n   render() {\n      return (\n         <div style={{ backgroundColor: \"#f0f2f5\" }}>\n            <NavbarComponent />\n            <Redirect from=\"/\" to=\"/posts\" exact />\n            <Switch>\n               {this.state.auth ? <Route path=\"/new-post\" component={AsyncNewPost} /> : null}\n               <Route path=\"/posts\" component={Posts} />\n               <Route render={() => <h1 style={{ margin: '100px' }}>Not found</h1>} />\n            </Switch>\n         </div>\n      )\n   }\n}\n\nexport default Blog","import React from 'react';\n\n\nconst asyncComponent = (importComponent) => {\n   return class extends React.Component {\n      state = {\n         component: null\n      }\n\n      componentDidMount() {\n         importComponent()\n            .then(cmp => {\n               this.setState({ component: cmp.default });\n            });\n      }\n\n\n      render() {\n         const C = this.state.component;\n\n         return C ? <C {...this.props} /> : null;\n\n      }\n   }\n}\n\nexport default asyncComponent ","import React, { Component } from 'react'\nimport Blog from './Container/Blog';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nclass App extends Component {\n   render() {\n      return (\n         // <BrowserRouter basename=\"/react-http\">\n         <BrowserRouter>\n            <Blog />\n         </BrowserRouter>\n      )\n   }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}