{"version":3,"sources":["Component/Post.js","Component/FullPost.js","Component/NewPost.js","Container/Blog.js","App.js","serviceWorker.js","index.js"],"names":["Post","className","FullPost","type","Component","NewPost","state","title","author","content","placeholder","id","value","Blog","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAceA,EAZF,WACT,OACI,yBAAKC,UAAU,uCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,SACA,uBAAGA,UAAU,aAAb,aCgBDC,E,uKALP,OAVI,yBAAKD,UAAU,wCACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,SACA,uBAAGA,UAAU,aAAb,WACA,4BAAQA,UAAU,kBAAkBE,KAAK,UAAzC,qB,GAVGC,aCAFC,E,4MACjBC,MAAQ,CACJC,MAAO,GACPC,OAAQ,MACRC,QAAS,I,uDAIT,OACI,yBAAKR,UAAU,2BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,eAAd,YACA,6BAGA,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,2BAAOE,KAAK,OAAOF,UAAU,eAAeS,YAAY,YAKhE,yBAAKT,UAAU,YACX,yBAAKA,UAAU,cAEX,4BAAQA,UAAU,eAAeU,GAAG,UAChC,wCACA,8CAQhB,yBAAKV,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,8BAAUA,UAAU,eAAeS,YAAY,gBAGvD,yBAAKT,UAAU,aACX,yBAAKA,UAAU,cACX,2BAAOE,KAAK,SAASS,MAAM,SAASX,UAAU,8C,GA7CzCG,a,OC+BtBS,E,uKAxBP,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWb,UAAU,6BACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAACa,EAAA,EAAD,CAAWb,UAAU,gBACjB,kBAAC,EAAD,OAEJ,kBAACa,EAAA,EAAD,CAAWb,UAAU,gBACjB,kBAAC,EAAD,Y,GAnBDG,aCWJW,E,uKAZX,OAEE,6BACE,kBAAC,EAAD,W,GALUX,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.97b631e8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Post = () => {\r\n    return (\r\n        <div className=\"card border-primary mb- text-center\">\r\n            <div className=\"card-body\">\r\n                <h4 className=\"card-title\">Title</h4>\r\n                <p className=\"card-text\">author</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, { Component } from 'react'\r\n\r\nclass FullPost extends Component {\r\n    render() {\r\n\r\n        let post = <p>Please select a Post!</p>\r\n\r\n        post = (\r\n            <div className=\"card border-primary mb-3 text-center\" >\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">Title</h4>\r\n                    <p className=\"card-text\">Content</p>\r\n                    <button className=\"btn btn-warning\" type=\"button\">Delete Post</button>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n\r\n        return post;\r\n    }\r\n}\r\n\r\n\r\nexport default FullPost","import React, { Component } from 'react'\r\n\r\nexport default class NewPost extends Component {\r\n    state = {\r\n        title: '',\r\n        author: 'Max',\r\n        content: ''\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card p-4 border-primary\">\r\n                <div className=\"card-body\">\r\n                    <h3 className=\"text-center\">New Post</h3>\r\n                    <hr />\r\n\r\n\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"title\" />\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group\">\r\n                             \r\n                                <select className=\"form-control\" id=\"gender\">\r\n                                    <option>Male</option>\r\n                                    <option>Female</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Blog Post\"></textarea>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group\">\r\n                                <input type=\"submit\" value=\"Submit\" className=\"btn btn-outline-danger btn-block\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Post from './../Component/Post';\r\nimport FullPost from './../Component/FullPost';\r\nimport NewPost from './../Component/NewPost';\r\nimport Container from 'react-bootstrap/Container'\r\n\r\n\r\nclass Blog extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container className=\"bg-light p-3 card-columns\" >\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                    <Post />\r\n                </Container>\r\n                <Container className=\"bg-light p-3\" >\r\n                    <FullPost />\r\n                </Container>\r\n                <Container className=\"bg-light p-3\" >\r\n                    <NewPost />\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Blog","import React, { Component } from 'react'\nimport Blog from './Container/Blog';\n\n\nclass App extends Component {\n  render() {\n    return (\n\n      <div >\n        <Blog />\n      </div>\n\n\n    )\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}