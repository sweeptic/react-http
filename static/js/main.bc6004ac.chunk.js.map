{"version":3,"sources":["Component/Post.js","Component/FullPost.js","Component/NewPost.js","Container/Blog.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","onClick","clicked","title","author","FullPost","state","loadedPost","this","id","Axios","get","then","response","setState","data","post","body","type","Component","NewPost","content","placeholder","value","Blog","posts","selectedPostId","updatedPosts","slice","map","key","postSelectedHandler","style","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc6004ac.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Post = (props) => {\r\n   return (\r\n      <div  className=\"card text-center border-0\"\r\n            onClick={props.clicked}\r\n            >\r\n         <div className=\"card-body p-0\">\r\n            <h5 className=\"card-title border-bottom p-3 \">{props.title}</h5>\r\n            <p className=\"card-text bg-secondary mt-1 text-white rounded d-inline-flex px-2 mb-3\">{props.author}</p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Post\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\n\r\n\r\nclass FullPost extends Component {\r\n   state = {\r\n      loadedPost: null\r\n   }\r\n\r\n\r\n   componentDidUpdate() {\r\n\r\n      if (this.props.id) {\r\n         if (!this.state.loadedPost ||\r\n            (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)\r\n         ) {\r\n            Axios\r\n               .get(\"https://jsonplaceholder.typicode.com/posts/\" + this.props.id)\r\n               .then((response) => {\r\n                  this.setState({ loadedPost: response.data });\r\n               });\r\n         }\r\n      }\r\n   }\r\n\r\n   render() {\r\n\r\n      let post = (\r\n         <div className=\"card mb-3 text-center border-0\" >\r\n            <div className=\"card-body\">\r\n               <p className=\"card-text text-muted\">Please select a post !</p>\r\n            </div>\r\n         </div>)\r\n\r\n      if (this.props.id) {\r\n         post = (\r\n            <div className=\"card mb-3 text-center border-0\" >\r\n               <div className=\"card-body\">\r\n                  <p className=\"card-text text-muted\">Loading...</p>\r\n               </div>\r\n            </div>)\r\n      }\r\n\r\n      if (this.state.loadedPost) {\r\n\r\n         post = (\r\n            <div className=\"card mb-3 text-center\" >\r\n               <div className=\"card-body p-0\">\r\n                  <h4 className=\"card-title border-bottom p-3\">{this.state.loadedPost.title}</h4>\r\n                  <p className=\"card-text text-muted border-bottom p-3\">{this.state.loadedPost.body}</p>\r\n                  <button className=\"mb-3 btn btn-warning\" type=\"button\">Delete Post</button>\r\n               </div>\r\n            </div>\r\n         )\r\n      }\r\n\r\n      return post;\r\n   }\r\n}\r\n\r\n\r\nexport default FullPost","import React, { Component } from 'react'\r\n\r\nexport default class NewPost extends Component {\r\n   state = {\r\n      title: '',\r\n      author: 'Max',\r\n      content: ''\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"card p-4 \">\r\n            <div className=\"card-body\">\r\n               <h3 className=\"text-center\">New Post</h3>\r\n               <hr />\r\n\r\n\r\n               <div className=\"row\">\r\n\r\n                  <div className=\"col-md-6\">\r\n                     <div className=\"form-group\">\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Title\" />\r\n                     </div>\r\n                  </div>\r\n\r\n\r\n                  <div className=\"col-md-6\">\r\n                     <div className=\"form-group\">\r\n\r\n                        <select className=\"form-control\" id=\"gender\">\r\n                           <option value=\"Max\">Max</option>\r\n                           <option value=\"Anna\">Anna</option>\r\n                        </select>\r\n                     </div>\r\n                  </div>\r\n\r\n               </div>\r\n\r\n\r\n               <div className=\"row\">\r\n                  <div className=\"col-md-12\">\r\n                     <div className=\"form-group\">\r\n                        <textarea className=\"form-control\" placeholder=\"Blog Post\"></textarea>\r\n                     </div>\r\n                  </div>\r\n                  <div className=\"col-md-12\">\r\n                     <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Submit\" className=\"btn btn-outline-danger btn-block\" />\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Post from '../Component/Post';\r\nimport FullPost from '../Component/FullPost';\r\nimport NewPost from '../Component/NewPost';\r\nimport Axios from 'axios';\r\n// import styled from 'styled-components';\r\n\r\n\r\n// const GrayBackground = styled.div`\r\n// background-color: lightgrey;\r\n// `;\r\n\r\n\r\nclass Blog extends Component {\r\n\r\n   state = {\r\n      posts: [],\r\n      selectedPostId: null\r\n   };\r\n\r\n\r\n   componentDidMount() {\r\n      Axios\r\n         .get(\"https://jsonplaceholder.typicode.com/posts\")\r\n         .then((response) => {\r\n\r\n            const updatedPosts = response.data.slice(0, 3).map(post => {\r\n               return {\r\n                  ...post, author: 'Max'\r\n               }\r\n            })\r\n\r\n            this.setState({\r\n               posts: updatedPosts,\r\n            });\r\n\r\n         });\r\n   }\r\n\r\n   postSelectedHandler(id) {\r\n      this.setState({\r\n         selectedPostId: id\r\n      })\r\n   }\r\n\r\n   render() {\r\n\r\n      const posts = this.state.posts.map(post => <Post\r\n         key={post.id}\r\n         title={post.title}\r\n         author={post.author}\r\n         clicked={() => this.postSelectedHandler(post.id)}\r\n      />)\r\n\r\n\r\n      return (\r\n         <div style={{ backgroundColor: \"#f0f2f5\" }}>\r\n            <div className=\"container p-3 card-columns\" >\r\n               {posts}\r\n            </div>\r\n            <div className=\"container  p-3\" >\r\n               <FullPost id={this.state.selectedPostId} />\r\n            </div>\r\n            <div className=\"container p-3\" >\r\n               <NewPost />\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Blog","import React, { Component } from 'react'\nimport Blog from './Container/Blog';\n\n\nclass App extends Component {\n   render() {\n      return (\n         <Blog />\n      )\n   }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}