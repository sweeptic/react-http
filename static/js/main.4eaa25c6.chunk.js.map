{"version":3,"sources":["Component/Post.js","Container/Posts.js","Component/NewPost.js","Component/Navbar.js","Component/FullPost.js","Container/Blog.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","console","log","className","onClick","clicked","src","imgPath","alt","imgAlt","title","author","Posts","state","posts","selectedPostId","error","axios","get","then","response","updatedPosts","data","slice","map","post","setState","catch","id","this","to","key","process","postSelectedHandler","Container","Component","NewPost","content","postDataHandler","warn","type","placeholder","value","onChange","event","target","Navbar_Component","myActiveStyle","color","borderBottom","transition","Navbar","style","width","overflowX","fixed","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","NavLink","exact","activeStyle","pathname","hash","search","FullPost","loadedPost","deletePostHandler","match","params","loadedPostId","body","Blog","backgroundColor","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2QAmBeA,eAfF,SAACC,GAEX,OADAC,QAAQC,IAAIF,GAET,yBAAKG,UAAU,4BAA4BC,QAASJ,EAAMK,SACvD,yBAAKF,UAAU,eACZG,IAAKN,EAAMO,QACXC,IAAKR,EAAMS,SACd,yBAAKN,UAAU,iBACZ,wBAAIA,UAAU,iCAAiCH,EAAMU,OACrD,uBAAGP,UAAU,0EAA0EH,EAAMW,a,iCCmF1FC,E,4MAtFZC,MAAQ,CACLC,MAAO,GACPC,eAAgB,KAChBC,OAAO,G,kEAGW,IAAD,OACjBf,QAAQC,IAAI,6CACZe,IACIC,IAAI,+CACJC,MAAK,SAACC,GACJnB,QAAQC,IAAI,yDACZ,IAAMmB,EAAeD,EAASE,KAAKC,MAAM,EAAG,IAAIC,KAAI,SAAAC,GACjD,OAAO,2BACDA,GADN,IACYd,OAAQ,WAGvBV,QAAQC,IAAI,yDACZ,EAAKwB,SAAS,CACXZ,MAAOO,OAIZM,OAAM,SAACX,GACL,EAAKU,SAAS,CAAEV,OAAO,S,0CAIZY,GACjB3B,QAAQC,IAAI,qCACZ2B,KAAKH,SAAS,CACXX,eAAgBa,M,8CAWnB,OADA3B,QAAQC,IAAI,iDACL,I,gDAKP,OADAD,QAAQC,IAAI,kDACL,O,2CAKPD,QAAQC,IAAI,+C,+BAGL,IAAD,OACND,QAAQC,IAAI,kCACZ,IAAIY,EAAQ,mDAoBZ,OAlBKe,KAAKhB,MAAMG,QACbF,EAAQe,KAAKhB,MAAMC,MAAMU,KAAI,SAAAC,GAAI,OAE9B,kBAAC,IAAD,CAAMK,GAAI,IAAML,EAAKG,GAAIG,IAAKN,EAAKG,IAChC,kBAAC,EAAD,CACGrB,QAASyB,+BAA+CP,EAAKG,GAAK,OAClEnB,OAAQ,SAAWgB,EAAKG,GACxBG,IAAKN,EAAKG,GACVlB,MAAOe,EAAKf,MACZC,OAAQc,EAAKd,OACbN,QAAS,kBAAM,EAAK4B,oBAAoBR,EAAKG,WAKtD3B,QAAQC,IAAI,gDAIZ,kBAACgC,EAAA,EAAD,CAAW/B,UAAU,yBACjBW,M,gDA5CsBd,EAAOa,GAEpC,OADAZ,QAAQC,IAAI,mDACL,S,GAvCOiC,aCJCC,E,4MAClBvB,MAAQ,CACLH,MAAO,GACPC,OAAQ,MACR0B,QAAS,I,EAGZC,gBAAkB,WACfrC,QAAQC,IAAI,iC,sEAmBZ,OADAD,QAAQC,IAAI,4CACL,I,gDAKP,OADAD,QAAQC,IAAI,6CACL,O,2CAKPD,QAAQC,IAAI,wCACZD,QAAQC,IAAI2B,Q,0CAKZ5B,QAAQsC,KAAK,yCAEbtC,QAAQC,IAAI2B,Q,+BAGL,IAAD,OAEN,OADA5B,QAAQC,IAAI,uBAET,kBAACgC,EAAA,EAAD,CAAW/B,UAAU,YAClB,yBAAKA,UAAU,aACZ,yBAAKA,UAAU,aACZ,wBAAIA,UAAU,eAAd,YACA,6BACA,yBAAKA,UAAU,OACZ,yBAAKA,UAAU,YACZ,yBAAKA,UAAU,cACZ,2BAAOqC,KAAK,OAAOrC,UAAU,eAAesC,YAAY,QAAQC,MAAOb,KAAKhB,MAAMH,MAAOiC,SAAU,SAACC,GAAD,OAAW,EAAKlB,SAAS,CAAEhB,MAAOkC,EAAMC,OAAOH,aAGxJ,yBAAKvC,UAAU,YACZ,yBAAKA,UAAU,cACZ,4BAAQuC,MAAOb,KAAKhB,MAAMF,OAAQR,UAAU,eAAewC,SAAU,SAACC,GAAD,OAAW,EAAKlB,SAAS,CAAEf,OAAQiC,EAAMC,OAAOH,UAClH,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,YAKZ,yBAAKvC,UAAU,OACZ,yBAAKA,UAAU,aACZ,yBAAKA,UAAU,cACZ,8BAAUuC,MAAOb,KAAKhB,MAAMwB,QAASlC,UAAU,eAAesC,YAAY,YAAYE,SAAU,SAACC,GAAD,OAAW,EAAKlB,SAAS,CAAEW,QAASO,EAAMC,OAAOH,aAGvJ,yBAAKvC,UAAU,aACZ,yBAAKA,UAAU,cACZ,2BAAOC,QAASyB,KAAKS,gBAAiBE,KAAK,SAASE,MAAM,SAASvC,UAAU,sC,gDA3DrEH,EAAOa,GAEpC,OADAZ,QAAQC,IAAI,8CACL,S,GAtBwBiC,a,gBCiCtBW,EA9BU,WACtB,IAAMC,EAAgB,CAAEC,MAAO,QAASC,aAAc,kBAAmBC,WAAY,YAErF,OACG,gCAEG,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAAEC,MAAO,QAASC,UAAW,UAAYC,MAAM,MAAMC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAChH,kBAACzB,EAAA,EAAD,KACG,kBAACiB,EAAA,EAAOS,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACV,EAAA,EAAOW,OAAR,CAAeC,gBAAc,0BAC7B,kBAACZ,EAAA,EAAOa,SAAR,CAAiBpC,GAAG,yBACjB,kBAACqC,EAAA,EAAD,CAAK9D,UAAU,WAEZ,kBAAC8D,EAAA,EAAIC,KAAL,CAAUC,GAAIC,IAAStC,GAAG,IAAIuC,OAAK,EAACC,YAAavB,GAAjD,QAEA,kBAACkB,EAAA,EAAIC,KAAL,CAAUC,GAAIC,IAASE,YAAavB,EAAejB,GAAI,CACpDyC,SAAU,YACVC,KAAM,UACNC,OAAQ,uBAHX,kBC4DNC,E,4MA5EZ7D,MAAQ,CACL8D,WAAY,M,EAqBfC,kBAAoB,WACjB3E,QAAQC,IAAI,2B,kEAjBM,IAAD,OACjBD,QAAQC,IAAI2B,KAAK7B,MAAM6E,MAAMC,OAAOlD,IAChCC,KAAK7B,MAAM6E,MAAMC,OAAOlD,MACpBC,KAAKhB,MAAM8D,YACZ9C,KAAKhB,MAAM8D,YAAc9C,KAAKhB,MAAM8D,WAAW/C,MAAQC,KAAK7B,MAAM6E,MAAMC,OAAOlD,MAEhFX,IACIC,IAAI,8CAAgDW,KAAK7B,MAAM6E,MAAMC,OAAOlD,IAC5ET,MAAK,SAACC,GACJ,EAAKM,SAAS,CAAEiD,WAAYvD,EAASE,KAAMyD,aAAc,EAAK/E,MAAM6E,MAAMC,OAAOlD,QAEvF3B,QAAQC,IAAI,U,+BAUlBD,QAAQC,IAAI,mBAkBZ,IAAIuB,EAAO,KA0BX,OAzBAxB,QAAQC,IAAI2B,KAAK7B,OACb6B,KAAKhB,MAAM8D,aACZlD,EAEG,yBAAKtB,UAAU,sBACZ,yBAAKA,UAAU,yBAEZ,yBAAKA,UAAU,eAEZG,IAAK0B,+BAA+CH,KAAK7B,MAAM6E,MAAMC,OAAOlD,GAAK,OACjFpB,IAAK,SAAWqB,KAAK7B,MAAM6E,MAAMC,OAAOlD,KAI3C,yBAAKzB,UAAU,iBACZ,wBAAIA,UAAU,gCAAgC0B,KAAKhB,MAAM8D,WAAWjE,OACpE,uBAAGP,UAAU,0CAA0C0B,KAAKhB,MAAM8D,WAAWK,MAC7E,4BAAQ7E,UAAU,uBAAuBqC,KAAK,SAASpC,QAASyB,KAAK+C,mBAArE,mBAQRnD,M,GAxEUU,aC4CR8C,E,uKAtCT,OADAhF,QAAQC,IAAI,mBAET,yBAAKkD,MAAO,CAAE8B,gBAAiB,YAE5B,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOC,KAAK,IAAId,OAAK,EAACe,UAAWxE,IACjC,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOuE,KAAK,YAAYC,UAAWhD,IACnC,kBAAC,IAAD,CAAO+C,KAAK,OAAOd,OAAK,EAACe,UAAWV,Q,8CAS7C,OADAzE,QAAQC,IAAI,wCACL,I,gDAKP,OADAD,QAAQC,IAAI,yCACL,O,2CAKPD,QAAQC,IAAI,sC,0CAIZD,QAAQC,IAAI,yC,GAlCCiC,aCgCJkD,E,uKAhCT,OADApF,QAAQC,IAAI,gBAET,kBAAC,IAAD,KACG,kBAAC,EAAD,S,8CAQN,OADAD,QAAQC,IAAI,qCACL,I,gDAKP,OADAD,QAAQC,IAAI,sCACL,O,2CAKPD,QAAQC,IAAI,mC,0CAIZD,QAAQC,IAAI,sC,GA3BAiC,aCOEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OACN,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAEHC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEdxE,OAAM,SAAAX,GACLf,QAAQe,MAAMA,EAAMoF,c","file":"static/js/main.4eaa25c6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nconst Post = (props) => {\r\n   console.log(props)\r\n   return (\r\n      <div className=\"card text-center border-0\" onClick={props.clicked}>\r\n         <img className=\"card-img-top\"\r\n            src={props.imgPath}\r\n            alt={props.imgAlt} />\r\n         <div className=\"card-body p-0\">\r\n            <h5 className=\"card-title border-bottom p-3 \">{props.title}</h5>\r\n            <p className=\"card-text bg-secondary mt-1 text-white rounded d-inline-flex px-2 mb-3\">{props.author}</p>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default withRouter(Post);","import Post from '../Component/Post';\r\nimport React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// import axios from '../axios'\r\nimport axios from 'axios';\r\n\r\nclass Posts extends Component {\r\n\r\n   state = {\r\n      posts: [],\r\n      selectedPostId: null,\r\n      error: false\r\n   };\r\n\r\n   componentDidMount() {\r\n      console.log('............Post componentDidMount called')\r\n      axios\r\n         .get(\"https://jsonplaceholder.typicode.com/posts/\")\r\n         .then((response) => {\r\n            console.log('............componentDidMount then -> Post fetch data')\r\n            const updatedPosts = response.data.slice(0, 50).map(post => {\r\n               return {\r\n                  ...post, author: 'Max'\r\n               }\r\n            })\r\n            console.log('............componentDidMount then -> SetState called')\r\n            this.setState({\r\n               posts: updatedPosts,\r\n            });\r\n\r\n         })\r\n         .catch((error) => {\r\n            this.setState({ error: true })\r\n         })\r\n   }\r\n\r\n   postSelectedHandler(id) {\r\n      console.log('............Posts setstate called')\r\n      this.setState({\r\n         selectedPostId: id\r\n      })\r\n   }\r\n\r\n   static getDerivedStateFromProps(props, state) {\r\n      console.log('............Posts call getDerivedStateFromProps')\r\n      return null;\r\n   }\r\n\r\n   shouldComponentUpdate() {\r\n      console.log('............Posts call shouldComponentUpdate')\r\n      return true;\r\n   }\r\n\r\n   getSnapshotBeforeUpdate() {\r\n      console.log('............Posts call getSnapshotBeforeUpdate')\r\n      return null;\r\n   }\r\n\r\n\r\n   componentDidUpdate() {\r\n      console.log('............Posts call componentDidUpdate')\r\n   }\r\n\r\n   render() {\r\n      console.log('............Posts Posts render')\r\n      let posts = <p>something went wrong</p>\r\n\r\n      if (!this.state.error) {\r\n         posts = this.state.posts.map(post =>\r\n\r\n            <Link to={'/' + post.id} key={post.id}>\r\n               <Post\r\n                  imgPath={process.env.PUBLIC_URL + '/photos/unsplash-' + post.id + '.jpg'}\r\n                  imgAlt={'photo_' + post.id}\r\n                  key={post.id}\r\n                  title={post.title}\r\n                  author={post.author}\r\n                  clicked={() => this.postSelectedHandler(post.id)}\r\n               />\r\n            </Link>\r\n\r\n         )\r\n         console.log('............create Post component finished ')\r\n      }\r\n\r\n      return (\r\n         <Container className=\"p-3 mt-5 card-columns\">\r\n            {posts}\r\n         </Container>\r\n      )\r\n   }\r\n\r\n}\r\n\r\nexport default Posts","import React, { Component } from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\n\r\nexport default class NewPost extends Component {\r\n   state = {\r\n      title: '',\r\n      author: 'Max',\r\n      content: ''\r\n   }\r\n\r\n   postDataHandler = () => {\r\n      console.log('.....NewPost postDataHandler')\r\n      // const data = {\r\n      //    title: this.state.title,\r\n      //    author: this.state.author,\r\n      //    content: this.state.content,\r\n      // }\r\n      // Axios.post(\"/posts\", data)\r\n      // .then(response => {\r\n      //     console.log(response)\r\n      // })\r\n   }\r\n\r\n   static getDerivedStateFromProps(props, state) {\r\n      console.log('.....NewPost call getDerivedStateFromProps')\r\n      return null;\r\n   }\r\n\r\n   shouldComponentUpdate() {\r\n      console.log('.....NewPost call shouldComponentUpdate')\r\n      return true;\r\n   }\r\n\r\n   getSnapshotBeforeUpdate() {\r\n      console.log('.....NewPost call getSnapshotBeforeUpdate')\r\n      return null;\r\n   }\r\n\r\n\r\n   componentDidUpdate() {\r\n      console.log('.....NewPost call componentDidUpdate')\r\n      console.log(this)\r\n\r\n   }\r\n\r\n   componentDidMount() {\r\n      console.warn('.....NewPost componentDidMount called')\r\n      // console.log(this.props)\r\n      console.log(this)\r\n   }\r\n\r\n   render() {\r\n      console.log('.....NewPost render')\r\n      return (\r\n         <Container className=\"p-3 mt-5\">\r\n            <div className=\"card p-4 \">\r\n               <div className=\"card-body\">\r\n                  <h3 className=\"text-center\">New Post</h3>\r\n                  <hr />\r\n                  <div className=\"row\">\r\n                     <div className=\"col-md-6\">\r\n                        <div className=\"form-group\">\r\n                           <input type=\"text\" className=\"form-control\" placeholder=\"Title\" value={this.state.title} onChange={(event) => this.setState({ title: event.target.value })} />\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-md-6\">\r\n                        <div className=\"form-group\">\r\n                           <select value={this.state.author} className=\"form-control\" onChange={(event) => this.setState({ author: event.target.value })}>\r\n                              <option value=\"Max\">Max</option>\r\n                              <option value=\"Anna\">Anna</option>\r\n                           </select>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                     <div className=\"col-md-12\">\r\n                        <div className=\"form-group\">\r\n                           <textarea value={this.state.content} className=\"form-control\" placeholder=\"Blog Post\" onChange={(event) => this.setState({ content: event.target.value })}></textarea>\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"col-md-12\">\r\n                        <div className=\"form-group\">\r\n                           <input onClick={this.postDataHandler} type=\"submit\" value=\"Submit\" className=\"btn btn-danger btn-block\" />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </Container>\r\n      )\r\n   }\r\n}","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst Navbar_Component = () => {\r\n   const myActiveStyle = { color: \"white\", borderBottom: \"1px solid white\", transition: 'all 0.2s' }\r\n\r\n   return (\r\n      <header >\r\n\r\n         <Navbar style={{ width: '100vw', overflowX: 'hidden' }} fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Container >\r\n               <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n               <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n               <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                  <Nav className=\"ml-auto\">\r\n\r\n                     <Nav.Link as={NavLink} to=\"/\" exact activeStyle={myActiveStyle}>Home</Nav.Link>\r\n\r\n                     <Nav.Link as={NavLink} activeStyle={myActiveStyle} to={{\r\n                        pathname: '/new-post',\r\n                        hash: '#submit',\r\n                        search: '?quick-submit=true'\r\n                     }}>New Post</Nav.Link>\r\n\r\n                  </Nav>\r\n               </Navbar.Collapse>\r\n            </Container>\r\n         </Navbar>\r\n      </header>\r\n\r\n   )\r\n}\r\n\r\nexport default Navbar_Component","import React, { Component } from 'react'\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nclass FullPost extends Component {\r\n   state = {\r\n      loadedPost: null,\r\n\r\n   }\r\n\r\n\r\n   componentDidMount() {\r\n      console.log(this.props.match.params.id)\r\n      if (this.props.match.params.id) {\r\n         if (!this.state.loadedPost ||\r\n            (this.state.loadedPost && this.state.loadedPost.id !== +this.props.match.params.id)\r\n         ) {\r\n            axios\r\n               .get(\"https://jsonplaceholder.typicode.com/posts/\" + this.props.match.params.id)\r\n               .then((response) => {\r\n                  this.setState({ loadedPost: response.data, loadedPostId: this.props.match.params.id });\r\n               })\r\n            console.log('end')\r\n         }\r\n      }\r\n   }\r\n\r\n   deletePostHandler = () => {\r\n      console.log('deleting selected post')\r\n   }\r\n\r\n   render() {\r\n      console.log('fullpost render')\r\n\r\n      // let post = (\r\n      //    <div className=\"card mb-3 text-center border-0\" >\r\n      //       <div className=\"card-body\">\r\n      //          <p className=\"card-text text-muted\">Please select a post !</p>\r\n      //       </div>\r\n      //    </div>)\r\n\r\n      // if (this.state.id || (this.state.loadedPostId !== this.props.match.params.id)) {\r\n      //    post = (\r\n      //       <div className=\"card mb-3 text-center border-0\" >\r\n      //          <div className=\"card-body\">\r\n      //             <p className=\"card-text text-muted\">Loading...</p>\r\n      //          </div>\r\n      //       </div>)\r\n      // }\r\n\r\n      let post = null;\r\n      console.log(this.props)\r\n      if (this.state.loadedPost) {\r\n         post = (\r\n\r\n            <div className=\"container p-3 mt-5\">\r\n               <div className=\"card mb-3 text-center\" >\r\n                  \r\n                  <img className=\"card-img-top\"\r\n\r\n                     src={process.env.PUBLIC_URL + '/photos/unsplash-' + this.props.match.params.id + '.jpg'}\r\n                     alt={'photo_' + this.props.match.params.id}\r\n\r\n                  />\r\n\r\n                  <div className=\"card-body p-0\">\r\n                     <h4 className=\"card-title border-bottom p-3\">{this.state.loadedPost.title}</h4>\r\n                     <p className=\"card-text text-muted border-bottom p-3\">{this.state.loadedPost.body}</p>\r\n                     <button className=\"mb-3 btn btn-warning\" type=\"button\" onClick={this.deletePostHandler} >Delete Post</button>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n\r\n         )\r\n      }\r\n\r\n      return post;\r\n   }\r\n}\r\n\r\n\r\nexport default FullPost","import React, { Component } from 'react'\r\nimport Posts from './Posts';\r\nimport NewPost from '../Component/NewPost';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport NavbarComponent from '../Component/Navbar'\r\nimport FullPost from './../Component/FullPost';\r\n\r\n\r\nclass Blog extends Component {\r\n   render() {\r\n      console.log('....Blog render')\r\n      return (\r\n         <div style={{ backgroundColor: \"#f0f2f5\" }}>\r\n\r\n            <NavbarComponent />\r\n\r\n            <Route path=\"/\" exact component={Posts} ></Route>\r\n            <Switch>\r\n               <Route path=\"/new-post\" component={NewPost} ></Route>\r\n               <Route path=\"/:id\" exact component={FullPost} ></Route>\r\n            </Switch>\r\n\r\n         </div>\r\n      )\r\n   }\r\n\r\n   shouldComponentUpdate() {\r\n      console.log('....Blog call shouldComponentUpdate')\r\n      return true;\r\n   }\r\n\r\n   getSnapshotBeforeUpdate() {\r\n      console.log('....Blog call getSnapshotBeforeUpdate')\r\n      return null;\r\n   }\r\n\r\n\r\n   componentDidUpdate() {\r\n      console.log('....Blog call componentDidUpdate')\r\n   }\r\n\r\n   componentDidMount() {\r\n      console.log('....Blog componentDidMount called')\r\n   }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Blog","import React, { Component } from 'react'\r\nimport Blog from './Container/Blog';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nclass App extends Component {\r\n   render() {\r\n      console.log('..App render')\r\n      return (\r\n         <BrowserRouter>\r\n            <Blog />\r\n         </BrowserRouter>\r\n      )\r\n   }\r\n\r\n\r\n   shouldComponentUpdate() {\r\n      console.log('..App call shouldComponentUpdate')\r\n      return true;\r\n   }\r\n\r\n   getSnapshotBeforeUpdate() {\r\n      console.log('..App call getSnapshotBeforeUpdate')\r\n      return null;\r\n   }\r\n\r\n\r\n   componentDidUpdate() {\r\n      console.log('..App call componentDidUpdate')\r\n   }\r\n\r\n   componentDidMount() {\r\n      console.log('..App componentDidMount called')\r\n   }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}